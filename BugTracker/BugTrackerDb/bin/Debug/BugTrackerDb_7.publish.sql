/*
Deployment script for BugTrackerDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BugTrackerDb"
:setvar DefaultFilePrefix "BugTrackerDb"
:setvar DefaultDataPath "C:\Users\NSCCStudent\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\NSCCStudent\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[AddNewApplication]...';


GO
CREATE PROCEDURE [dbo].[AddNewApplication]
	@AppName varchar(40),
	@AppVersion varchar(40),
	@AppDesc varchar(40)
AS

SET NOCOUNT OFF

IF NOT EXISTS (SELECT AppID FROM Applications WHERE AppName = @AppName)
	BEGIN
		INSERT INTO Applications (AppName, AppVersion, AppDesc)
			VALUES(@AppName, @AppVersion, @AppDesc);
		RETURN 1
	END
ELSE
	RETURN 0
GO
PRINT N'Creating [dbo].[AddNewBug]...';


GO
CREATE PROCEDURE [dbo].[AddNewBug]
	@UserID int
	,@AppID int
	,@BugDate DATETIME
	,@BugDesc varchar(40)
	,@BugDetails text
	,@RepSteps text
AS
BEGIN 
	SET NOCOUNT ON;

	DECLARE @BugID AS int

	BEGIN TRY
		BEGIN TRANSACTION;
			INSERT INTO Bugs (AppID, UserID, BugDate, BugDesc, BugDetails, RepSteps) 
				VALUES(@AppID, @UserID, @BugDate, @BugDetails, @RepSteps);

			set @BugID = SCOPE_IDENTITY()

			INSERT INTO BugLog (BugLogDate, StatusCodeID, UserID, BugLogDesc, BugID) 
				VALUES(DateTime(), 1, @UserID, 'initial bug entered', @BugID);
		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
	END CATCH;
END;
GO
PRINT N'Creating [dbo].[AddNewUser]...';


GO
CREATE PROCEDURE [dbo].[AddNewUser]
	@UserName varchar(80)
	,@UserEmail varchar(80)
	,@UserTel varchar(40)
AS

SET NOCOUNT OFF

IF NOT EXISTS (SELECT UserID FROM Users WHERE UserEmail = @UserEmail)
	BEGIN		
		INSERT INTO Users (UserName, UserEmail, UserTel) 
			VALUES(@UserName, @UserEmail, @UserTel);
		RETURN 1
	END
	ELSE
		RETURN 0
GO
PRINT N'Creating [dbo].[ConfirmUserName]...';


GO
CREATE PROCEDURE [dbo].[ConfirmUserName]
	@UserName varchar(80),
	@Result bit OUTPUT

AS

SET NOCOUNT ON 
/*Stops the message that shows the count
of the number of rows affected by the statement*/
BEGIN
	IF EXISTS (SELECT UserID FROM Users WHERE UserName = @UserName)
			set @Result = 0
	ELSE
			set @Result = 1
END
GO
PRINT N'Creating [dbo].[DeleteApplication]...';


GO
CREATE PROCEDURE [dbo].[DeleteApplication]
	@AppName varchar(40),
	@Status bit OUTPUT
AS

	SET NOCOUNT ON 

	IF Exists (SELECT BugID FROM Bugs WHERE AppID = 
	(SELECT AppID FROM Applications WHERE APPName = @AppName))
		BEGIN
			DELETE FROM Applications WHERE AppName = @AppName;
			select @Status = 1 
			if(@@ROWCOUNT = 0)
			BEGIN
				RAISERROR('Application deletion failed', 16, 1)
			END
		END
	ELSE
		select @Status = 0
GO
PRINT N'Creating [dbo].[DeleteBug]...';


GO
CREATE PROCEDURE [dbo].[DeleteBug]
	@BugID int
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY
		BEGIN TRANSACTION;

			DELETE FROM BugLog WHERE BugID = @BugID;

			DELETE FROM Bugs WHERE BugID = @BugID;

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
	END CATCH;
END;
GO
PRINT N'Creating [dbo].[DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[DeleteUser]
	@UserID int
AS

	SET NOCOUNT ON 

	DELETE FROM Users WHERE UserID = @UserID;
	if(@@ROWCOUNT = 0)
		BEGIN
			RAISERROR('User Deletion failed', 16, 1)
		END
GO
PRINT N'Creating [dbo].[GetApplicationInformation]...';


GO
CREATE PROCEDURE [dbo].[GetApplicationInformation]
	@AppID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT AppName, AppVersion, AppDesc FROM Applications WHERE AppID = @AppID;
END;
GO
PRINT N'Creating [dbo].[GetBugInformation]...';


GO
CREATE PROCEDURE [dbo].[GetBugInformation]
	@BugID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	BugDate
			,BugDesc
			,BugDetails
			,RepSteps
			,FixDate
	FROM Bugs WHERE BugID = @BugID;
END;
GO
PRINT N'Creating [dbo].[GetBugLogInformation]...';


GO
CREATE PROCEDURE [dbo].[GetBugLogInformation]
	@BugID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT BugLogDate, StatusCOdeDesc, UserName, BugLogDesc  	
	FROM BugLog
	INNER JOIN StatusCodes
	ON BugLog.StatusCodeID = StatusCodes.StatusCodeID
	INNER JOIN Users
	ON BugLog.UserID = Users.UserID
	WHERE BugID = @BugID;
END;
GO
PRINT N'Creating [dbo].[GetUserInformation]...';


GO
CREATE PROCEDURE [dbo].[GetUserInformation]
	@UserID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT UserName, UserEmail, UserTel FROM Users WHERE UserID = @UserID;
END;
GO
PRINT N'Creating [dbo].[ListAllApplications]...';


GO
CREATE PROCEDURE [dbo].[ListAllApplications]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT AppName FROM Applications;

END;
GO
PRINT N'Creating [dbo].[ListAllBugs]...';


GO
CREATE PROCEDURE [dbo].[ListAllBugs]
	@AppID int,
	@StatusCodeID int
AS
BEGIN

	SET NOCOUNT ON;

	SELECT 'B'+b.BugID+'-'+b.BugDesc AS 'ButList'
	FROM Applications app
	INNER JOIN Bugs b
	ON app.AppID = b.AppID
	INNER JOIN BugLog bl
	ON b.BugID = bl.BugID
	INNER JOIN StatusCodes s
	ON bl.StatusCodeID = s.statusCodeId
	WHERE app.AppID = @AppID AND s.statusCodeId = @StatusCodeID;

END;
GO
PRINT N'Creating [dbo].[ListAllStatusCodes]...';


GO
CREATE PROCEDURE [dbo].[ListAllStatusCodes]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT statusCodeId, statusCodeDesc FROM StatusCodes;

END;
GO
PRINT N'Creating [dbo].[ListAllUsers]...';


GO
CREATE PROCEDURE [dbo].[ListAllUsers]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT UserName FROM Users;

END;
GO
PRINT N'Creating [dbo].[UpdateApplicaion]...';


GO
CREATE PROCEDURE [dbo].[UpdateApplicaion]
(
	@AppID int,
	@AppName varchar(40),
	@AppVersion varchar(40),
	@AppDesc varchar(40)
)
AS
	SET NOCOUNT ON

	UPDATE Applications 
	SET	AppName = @AppName,
		AppVersion = @AppVersion,
		AppDesc = @AppDesc
	WHERE AppID = @AppID;

	-- WARNING: Use @@rowcount immediately after the UPDATE statement
	if(@@ROWCOUNT = 0)
	BEGIN
		RAISERROR('Update failed', 16, 1)
	END
GO
PRINT N'Creating [dbo].[UpdateBug]...';


GO
CREATE PROCEDURE [dbo].[UpdateBug]
(	
	@BugID int
	,@AppID int
	,@UserID int
	,@BugSignOff int
	,@BugDate DATETIME
	,@BugDesc varchar(40)
	,@BugDetail text
	,@RepSteps text
	,@FixDate DATETIME
	,@BugLogDesc text
	,@StatusCodeID int
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		BEGIN TRANSACTION;

			UPDATE Bugs
			SET AppID = @AppID
				,UserID = @UserID
				,BugSignOff = @BugSignOff
				,BugDate = @BugDate
				,BugDesc = @BugDesc
				,BugDetails = @BugDetail
				,RepSteps = @RepSteps
				,FixDate = @FixDate
			WHERE BugID = @BugID;

			INSERT INTO BugLog 
				(BugLogDate
				,StatusCodeID
				,UserID
				,BugLogDesc
				,BugID) 
			VALUES(DateTime(), @StatusCodeID, @UserID, @BugLogDesc, @BugID);

		COMMIT TRANSACTION;
	END TRY
	BEGIN CATCH
        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
	END CATCH;
END;
GO
PRINT N'Creating [dbo].[UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[UpdateUser]
(	
	@UserID int
	,@UserName varchar(80)
	,@UserEmail varchar(80)
	,@UserTel varchar(40)
)
AS
	SET NOCOUNT ON

	UPDATE Users set
		UserName = @UserName,
		UserEmail = @UserEmail,
		UserTel = @UserTel
	WHERE UserID = @UserID;

	-- WARNING: Use @@rowcount immediately after the UPDATE statement
	if(@@ROWCOUNT = 0)
	BEGIN
		RAISERROR('Concurrency error detected', 16, 1)
	END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

IF NOT EXISTS (SELECT 1 FROM StatusCodes WHERE statusCodeDesc = 'Unassigned')
BEGIN
	INSERT INTO StatusCodes (statusCodeDesc) VALUES('Unassigned');
	INSERT INTO StatusCodes (statusCodeDesc) VALUES('In Progress');
	INSERT INTO StatusCodes (statusCodeDesc) VALUES('Ready for Review');
	INSERT INTO StatusCodes (statusCodeDesc) VALUES('Closed');
END
GO

GO
PRINT N'Update complete.';


GO
